@if (PageCount > 1)
{
    <nav aria-label="Page navigation example">
        <ul class="pagination justify-content-center">
            <li class="page-item">
                <a class="page-link" href="#" aria-label="Previous" @onclick:preventDefault @onclick="() => GoToPageClick(_previousPage)">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            @{
                var x = 0;

                while (x < PageCount)
                {
                    x++;
                    int pageIndex = x;
                    <li class="page-item @(x == ActivePage ? "active" : "")">
                        <a class="page-link" href="#" @onclick:preventDefault @onclick="() => GoToPageClick(pageIndex)">@x</a>
                    </li>
                }
            }
            <li class="page-item">
                <a class="page-link" href="#" aria-label="Next" @onclick:preventDefault @onclick="() => GoToPageClick(_nextPage)">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter]
    public int PageCount { get; set; }

    [Parameter]
    public int ActivePage { get; set; }

    [Parameter]
    public EventCallback<int> PageClick { get; set; }

    private int _previousPage = 1;
    private int _nextPage = 1;

    protected override Task OnParametersSetAsync()
    {
        if (ActivePage > 1)
        {
            _previousPage = ActivePage - 1;
        }

        if (ActivePage < PageCount)
        {
            _nextPage = ActivePage + 1;
        }

        return base.OnParametersSetAsync();
    }

    private async Task GoToPageClick(int page)
    {
        await InvokeAsync(() => PageClick.InvokeAsync(page));
    }

}