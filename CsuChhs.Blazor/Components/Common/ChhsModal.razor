@inherits LayoutComponentBase

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

<div class="modal fade @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog @_modalSize" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @ModalBody
            </div>
            <div class="modal-footer">
                @ModalFooter
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    public string ModalDisplay = "none";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    private string _modalSize = "";

    public enum SizeOptions
    {
        Default = 0,
        Small = 1,
        Large = 2,
        ExtraLarge = 3
    }

    [Parameter] public SizeOptions? Size { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public RenderFragment? ModalTitle { get; set; }
    public RenderFragment? ModalBody { get; set; }
    public RenderFragment? ModalFooter { get; set; }

    protected override Task OnParametersSetAsync()
    {
        _modalSize = Size switch
        {
            SizeOptions.Small => "modal-sm",
            SizeOptions.Large => "modal-lg",
            SizeOptions.ExtraLarge => "modal-xl",
            _ => ""
        };
        return base.OnParametersSetAsync();
    }

    public void Open()
    {
        ModalDisplay = "block";
        ModalClass = "show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    
    public void SetTitle(RenderFragment? content) => ModalTitle = content;
    public void SetBody(RenderFragment? content) => ModalBody = content;
    public void SetFooter(RenderFragment? content) => ModalFooter = content;

}