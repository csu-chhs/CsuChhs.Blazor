@using System.Timers;
@implements IDisposable

<input placeholder="Search..." @attributes="AdditionalAttributes" @bind="SearchQuery" @bind:event="oninput" class="form-control" />

@code {
    /*
     * This component provides a single input/search box that
     * invokes a search method when the user types.  It has a
     * set delay of 300 miliseconds before it attempts to
     * invoke the search.
     */

    Timer debounceTimer;
    string searchQuery;

    string SearchQuery
    {
        get => searchQuery;
        set
        {
            searchQuery = value;
            debounceTimer.Stop();
            debounceTimer.Start();
        }
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter]
    public int Debounce { get; set; } = 300;

    [Parameter]
    public EventCallback<string> SearchQueryChanged { get; set; }

    protected override void OnInitialized()
    {
        debounceTimer = new Timer();
        debounceTimer.Interval = Debounce;
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += Search;
    }

    async void Search(Object source, ElapsedEventArgs e)
    {
        await InvokeAsync(() => SearchQueryChanged.InvokeAsync(SearchQuery));
    }

    public void Clear()
    {
        searchQuery = "";
    }

    public void Dispose()
    {
        debounceTimer.Dispose();
    }

}